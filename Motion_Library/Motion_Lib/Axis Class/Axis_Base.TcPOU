<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Axis_Base" Id="{6091fbf5-8563-4c3d-a46f-a871d52562e9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Axis_Base IMPLEMENTS I_AxisBase, I_PositionAxis, I_AxisStatus, I_VelocityAxis, I_Jog
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_axis : REFERENCE TO Tc2_MC2.AXIS_REF;
	EnableBehaviour : EnableBehaviour(_axis);
	DefaultResetBehaviour : ResetBehaviour(_axis);
	DefaultMoveBehaviour : BufferedPositionBehaviour;
	DefaultRelBehaviour : BufferedRelativeBehaviour(_axis);
	DefaultModBehaviour : BufferedModuloBehaviour(_axis);
	DefaultVeloBehaviour : VelocityBehaviour(_axis);
	DefaultJogBehaviour : JogBehaviour(_axis);
	HaltBehaviour	: HaltBehaviour(_axis);
	TaskCollection : ObjectRunner;
	axesReadError : Tc2_MC2.MC_ReadAxisError;
	_ErrorId: DWORD;
	_Logger : Message_Null;
	_TraceLogger : I_Message := _Logger;
	CurrentTask : I_Task;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{analysis -2}]]></ST>
    </Implementation>
    <Folder Name="Commands" Id="{07afdc00-d51e-4496-9063-9bd8f62d5829}" />
    <Folder Name="Dynamics" Id="{cb4086e9-6981-4aa8-9a87-7a24dd3c8528}" />
    <Folder Name="Status" Id="{91eb89a1-3e50-4f9b-a3c9-6207bfd52c53}" />
    <Property Name="Acceleration" Id="{6323273a-3225-4f5a-9181-064e3eedda66}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Acceleration : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{34764180-07ec-4ccd-a6b8-92e00db717a8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Acceleration := DefaultMoveBehaviour.Acceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b780dd24-dc2c-4df0-8817-84480edf7b7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DefaultMoveBehaviour.Acceleration := Acceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="BufferMode" Id="{d08e2361-5203-4398-8c61-726e8a84e0a3}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY BufferMode : MC_BufferMode]]></Declaration>
      <Get Name="Get" Id="{9e81ee1e-088d-4c14-a24d-933fb207a31e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BufferMode := DefaultMoveBehaviour.BufferMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{520c3d3e-0864-445a-a57c-42fec43ce8ec}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DefaultMoveBehaviour.BufferMode:= BufferMode;
DefaultRelBehaviour.BufferMode := BufferMode;
DefaultModBehaviour.BufferMode := BufferMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cycle" Id="{6e2b69ab-f1bf-4962-bdbb-f480f753daf6}">
      <Declaration><![CDATA[METHOD Cycle : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EnableBehaviour.Cycle();

DefaultRelBehaviour.Cycle();
DefaultModBehaviour.Cycle();
HaltBehaviour.Cycle();
DefaultResetBehaviour.Cycle();
DefaultVeloBehaviour.Cycle();
DefaultJogBehaviour.Cycle();
_axis.ReadStatus();
axesReadError(Axis := _axis, Enable := TRUE, AxisErrorID => _ErrorId);
TaskCollection.Cycle();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Deceleration" Id="{bb54abe4-e56a-4330-9f3c-f7af329a7f17}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Deceleration : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{433beca3-2b49-4ba6-9d63-f01118a89332}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Deceleration := DefaultMoveBehaviour.Deceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{28be4d06-067d-435d-89a3-c0ee8fd02e9d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DefaultMoveBehaviour.Deceleration := Deceleration;
HaltBehaviour.Deceleration := Deceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DisableAxis" Id="{4ca2c35a-d664-47dd-b699-e212d5be22eb}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC DisableAxis : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[DisableAxis := EnableBehaviour.Disable(CurrentTask);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableAxis" Id="{a835c18f-6175-4614-a6ac-65491f5fc70d}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC EnableAxis : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[EnableAxis := EnableBehaviour.Enable(CurrentTask);

_TraceLogger.Send(Message := 'Axis Enable Commanded');
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{b79a0e62-0ee6-47b6-874a-a1e2579a6c1b}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change) 
	Axis : Reference TO AXIS_REF;  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[EnableBehaviour.FB_init(FALSE, FALSE, axis);
DefaultResetBehaviour.FB_init(FALSE, FALSE, axis);
DefaultMoveBehaviour.AxisRef REF= axis;
DefaultVeloBehaviour.FB_Init(FALSE, FALSE, axis);
DefaultJogBehaviour.FB_Init(FALSE, FALSE, axis);
DefaultRelBehaviour.FB_init(FALSE, FALSE, axis);
DefaultModBehaviour.FB_init(FALSE, FALSE, axis);
HaltBehaviour.FB_init(FALSE, FALSE, axis);
_axis REF= Axis;
TaskCollection.RegisterModule(DefaultMoveBehaviour);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCurrentPosition" Id="{c887f268-1e61-4e9e-8941-aa0a7b360cf9}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD getCurrentPosition : LREAL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCurrentPosition := _axis.NcToPlc.ActPos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetErrorId" Id="{c8c8fb1e-3132-40a5-bb74-f66710995f3e}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD GetErrorId : DWORD
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetErrorId := _ErrorId;]]></ST>
      </Implementation>
    </Method>
    <Method Name="HaltAxis" Id="{b5b4d676-a559-4d25-8571-0c2ec9c3c015}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC HaltAxis : HRESULT
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT HaltBehaviour.Busy THEN
	HaltAxis := HaltBehaviour.Execute(CurrentTask);
	DefaultMoveBehaviour.Abort();
	DefaultVeloBehaviour.Abort();
ELSE 
	HaltAxis := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="hasError" Id="{ca345aeb-702e-4d9d-ada0-0eb76d61a85d}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD hasError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[hasError := _axis.Status.Error;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Inch" Id="{a8ecae9a-5934-4e49-93bc-ed8a7c89528c}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD Inch : HRESULT
VAR_INPUT
	Distance : MC_LREAL;
	Direction : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FAILED( DefaultJogBehaviour.Inch(Distance, Direction)) THEN
	Inch := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="isAtPosition" Id="{a3fbba8b-aebd-4df9-9a9b-10d926ce7c0a}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD isAtPosition : BOOL
VAR_INPUT
	position : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _axis.NcToPlc.ActPos < position + 0.2 AND _axis.NcToPlc.ActPos > position - 0.2 THEN
	isAtPosition := TRUE;
ELSE
	isAtPosition := FALSE;
END_IF  

]]></ST>
      </Implementation>
    </Method>
    <Method Name="isEnabled" Id="{460678ae-c472-4e27-a376-f3d29d1278b6}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD isEnabled : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isEnabled := not _axis.Status.Disabled;]]></ST>
      </Implementation>
    </Method>
    <Method Name="isInVelocity" Id="{7ec3b18f-c8fb-413e-b2d4-c16b36d40216}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD isInVelocity : BOOL
VAR_INPUT
	Velocity : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _axis.NcToPlc.ActVelo < Velocity + 0.2 AND _axis.NcToPlc.ActVelo > Velocity - 0.2 THEN
	isInVelocity := TRUE;
ELSE
	isInVelocity := FALSE;
END_IF  

]]></ST>
      </Implementation>
    </Method>
    <Method Name="isStationary" Id="{4df49a98-73c3-4028-9049-ecd2a431e2f1}" FolderPath="Status\">
      <Declaration><![CDATA[METHOD PUBLIC isStationary : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[isStationary := _axis.NcToPlc.SetVelo = 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Jerk" Id="{79ff8a18-6bf8-46ba-a24c-7f84c4790e08}" FolderPath="Dynamics\">
      <Declaration><![CDATA[PROPERTY PUBLIC Jerk : mc_lreal]]></Declaration>
      <Get Name="Get" Id="{66a6c61c-9532-41a0-a772-02a7efa824e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Jerk := DefaultMoveBehaviour.Jerk;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{fce2a919-a42f-43d2-85c4-9447d205ce29}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DefaultMoveBehaviour.Jerk := Jerk;
HaltBehaviour.Jerk := Jerk;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="JogFast" Id="{95cc0a16-a1bd-4e7f-963c-68820a459e0a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD JogFast : HRESULT
VAR_INPUT
	Direction : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FAILED(DefaultJogBehaviour.JogFast(Direction)) THEN
	JogFast := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="JogSlow" Id="{6f896ef2-e375-4b54-96df-82c467e4828a}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD JogSlow : HRESULT
VAR_INPUT
	Direction : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FAILED(DefaultJogBehaviour.JogSlow(Direction)) THEN
	JogSlow := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveAtVelocity" Id="{6d3a50a7-ce83-4f3f-b972-fcb26bf76028}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD MoveAtVelocity : HRESULT
VAR_INPUT
	Direction : MC_Direction;
	Velocity : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DefaultVeloBehaviour.MoveAtVelocity(Direction, Velocity, CurrentTask) = 1 THEN
	MoveAtVelocity := 1;
ELSE
	MoveAtVelocity := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveByDistance" Id="{957d5870-8bcd-44f2-a483-ac5c3f32f182}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD MoveByDistance : HRESULT
VAR_INPUT
	Distance : MC_LREAL;
	Velocity : MC_LREAL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Distance) > 0 THEN
	DefaultRelBehaviour.MoveBy(Distance,Velocity,CurrentTask);
	MoveByDistance := 1;
ELSE
	MoveByDistance := -1;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToModuloPosition" Id="{470f0d21-ab3e-4d10-948f-9938775e223b}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD MoveToModuloPosition : HRESULT
VAR_INPUT
	Position : MC_LREAL;
	Velocity : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT isAtPosition(position := Position) THEN
	DefaultModBehaviour.MoveTo(Position,Velocity,CurrentTask);
	MoveToModuloPosition := 1;
ELSE
	MoveToModuloPosition := -1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToPosition" Id="{bca42834-4b90-4808-be50-ee67839e4111}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC MoveToPosition : HRESULT
VAR_INPUT
	Position : MC_LREAL;
	Velocity : MC_LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT isAtPosition(position := Position) THEN
	DefaultMoveBehaviour.MoveTo(Position,Velocity);
	MoveToPosition := 1;
ELSE
	MoveToPosition := -1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterLogger" Id="{954d075d-f99c-44c6-9585-ff5758ad051d}">
      <Declaration><![CDATA[METHOD RegisterLogger : HRESULT
VAR_INPUT
	MyLogger : I_Message;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF MyLogger <> 0 THEN
	_TraceLogger := MyLogger;
	RegisterLogger := 1;
ELSE
	_TraceLogger := _Logger;
	RegisterLogger := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{bd5b60f2-6a45-4850-931f-c2efbdee4a44}" FolderPath="Commands\">
      <Declaration><![CDATA[METHOD PUBLIC Reset : HRESULT
VAR
	ResetResult : HRESULT;
	MoveAbortResult : BOOL;
	HaltAbortResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ResetResult := DefaultResetBehaviour.Execute(CurrentTask);
TaskCollection.Reset();
HaltAbortResult := HaltBehaviour.Abort();
IF ResetResult = S_OK AND MoveAbortResult AND HaltAbortResult THEN
	Reset := 1;
ELSE
	Reset := -1;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>