<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AxisHaltTestSuite" Id="{506c244a-6b71-4d33-aeec-65d4d3cf5d5e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AxisHaltTestSuite EXTENDS TestSuite<TestSuiteParameter.MaxTestCount>
VAR
	StubAxis : AXIS_REF;
	iStubTask : I_Task;
	TestAxisHalt : HaltTask := (AxisRef := StubAxis);
	HaltAxisStatusFeedback AT%Q* : DWORD;
	Cycle : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE Cycle OF
	0:
		DoesTaskAbortClearBusy_Test();
		DoesTaskAcceptDeceleration_Test();
		DoesTaskAcceptJerk_Test();
		DoesTaskRejectHaltWhenHalting_Test();
		DoesTaskRejectHaltWhenStationary();
		DoesTaskRejectNegativeDecel_Test();
		DoesTaskRejectNegativeJerk_Test();
		HaltAxisStatusFeedback := 512;
		IF StubAxis.Status.Moving THEN
			Cycle := 1;
		END_IF
		
	1:
		DoesTaskAcceptHaltSettingBusy();
		HaltAxisStatusFeedback := 0;
		Cycle := 0;
END_CASE

StubAxis.ReadStatus();]]></ST>
    </Implementation>
    <Method Name="DoesTaskAbortClearBusy_Test" Id="{396289fc-d1fc-4ad3-a1b2-75290c475f0c}">
      <Declaration><![CDATA[METHOD DoesTaskAbortClearBusy_Test
VAR_INST
	Expected : BOOL := False;
	Actual	 : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	TestAxisHalt.Execute();
	TestAxisHalt.Abort();
	Actual := TestAxisHalt.Busy;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskAcceptDeceleration_Test" Id="{0b50a50f-eb72-411c-8915-6ad01c86f81a}">
      <Declaration><![CDATA[METHOD DoesTaskAcceptDeceleration_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	TestAxisHalt.Deceleration := 1.0;
	Actual := TestAxisHalt.Deceleration = 1.0;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Deceleration := 0.0;
	TestAxisHalt.Abort();
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskAcceptHaltSettingBusy" Id="{c1bc0269-ae8d-4f1d-b105-ad0df1227da1}">
      <Declaration><![CDATA[METHOD DoesTaskAcceptHaltSettingBusy
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	TestAxisHalt.Execute();
	Actual := TestAxisHalt.Busy;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Abort();
	HaltAxisStatusFeedback := 0;
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskAcceptJerk_Test" Id="{98050709-162e-4845-bb7b-c45a7c0823c3}">
      <Declaration><![CDATA[METHOD DoesTaskAcceptJerk_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	TestAxisHalt.Jerk := 1.0;
	Actual := TestAxisHalt.Jerk = 1.0;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Jerk := 0.0;
	TestAxisHalt.Abort();
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskRejectHaltWhenHalting_Test" Id="{48ddc48e-e466-40b6-8eab-977aa7646793}">
      <Declaration><![CDATA[METHOD DoesTaskRejectHaltWhenHalting_Test : BOOL
VAR_INST
	Expected : HRESULT;
	Actual	 : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Expected := S_FALSE;
	TestAxisHalt.Execute();
	Actual := TestAxisHalt.Execute();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Abort();
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskRejectHaltWhenStationary" Id="{d10470f1-6c20-4eed-b536-d69117943531}">
      <Declaration><![CDATA[METHOD DoesTaskRejectHaltWhenStationary : BOOL
VAR_INST
	Expected : HRESULT;
	Actual	 : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	Expected := S_FALSE;
	Actual := TestAxisHalt.Execute();
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Abort();
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskRejectNegativeDecel_Test" Id="{1b1adc1a-7db5-4792-b8f3-41b347a17820}">
      <Declaration><![CDATA[METHOD DoesTaskRejectNegativeDecel_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	TestAxisHalt.Deceleration := -1.0;
	Actual := TestAxisHalt.Deceleration = 0.0;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Abort();
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="DoesTaskRejectNegativeJerk_Test" Id="{b3c97203-5864-4bb9-a5e3-eaafca001cfe}">
      <Declaration><![CDATA[METHOD DoesTaskRejectNegativeJerk_Test
VAR_INST
	Expected : BOOL := TRUE;
	Actual	 : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Test(__POUNAME()).ExecuteTest() THEN
	TestAxisHalt.Jerk := -1.0;
	Actual := TestAxisHalt.jerk = 0.0;
	Test(__POUNAME()).AssertEqual(Expected, Actual);
	TestAxisHalt.Abort();
END_IF	]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>